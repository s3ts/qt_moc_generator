#
# qt_generator.gni
# GN include file
#
# Copyright (c) David Chen, 2017
#
# Example usage in GN:
#
# qt_moc_generator("moc_library") {
#     
#     qt_moc_generator_path = rebase_path("qt/qt_moc_generator.py", ".")
#
#     sources = [
#         "src/qt_header1.h",
#         "src/qt_header2.h",
#     ]
#     include_dirs = [
#         "/usr/include/qt5",
#     ]
#     moc_out_dir = "qt/moc"
# }
#


template("qt_moc_generator") {
  assert(defined(invoker.qt_moc_generator_path), "Need correct path to qt_moc_generator.py")
  assert(defined(invoker.qt_sources), "Need sources for gt_moc_generator")
  moc_sources = invoker.qt_sources
  moc_in_dir = get_path_info(moc_sources[0], "dir")

  if (defined(invoker.moc_in_dir)) {
    moc_in_dir = invoker.moc_in_dir
    foreach(moc_source, moc_sources) {
      if (get_path_info(proto_source, "dir") != moc_in_dir) {
        has_nested_dirs = true
      }
    }
  } else {
    moc_in_dir = get_path_info(moc_sources[0], "dir")

    # Sanity check, |moc_in_dir| should be defined to allow sub-directories.
    foreach(moc_source, moc_sources) {
      assert(get_path_info(moc_source, "dir") == moc_in_dir,
             "Please define |moc_sources| to allow nested directories.")
    }
  }

  # Avoid absolute path because of the assumption that |moc_in_dir| is
  # relative to the directory of current BUILD.gn file.
  moc_in_dir = rebase_path(moc_in_dir, ".")

  if (defined(invoker.moc_out_dir)) {
    moc_out_dir = invoker.moc_out_dir
  } else {
    # Absolute path to the directory of current BUILD.gn file excluding "//".
    moc_out_dir = rebase_path(".", "//")
    if (moc_in_dir != ".") {
      moc_out_dir += "/$moc_in_dir"
    }
  }


  # we generate "{name}.moc.cc" from the header files
  cc_out_dir = "$target_gen_dir/" + moc_out_dir #root_gen_dir/
  rel_cc_out_dir = rebase_path(cc_out_dir, root_build_dir)

  headers = rebase_path(invoker.qt_sources, moc_in_dir)
  mocgens = []

  # List output files.
  foreach(header, headers) {
    header_dir = get_path_info(header, "dir")
    header_name = get_path_info(header, "name")
    header_path = header_dir + "/" + header_name

    mocgens += [
      "$cc_out_dir/$header_path.moc.cc",
    ]
  }

  action_name = "${target_name}_gen"
  source_set_name = target_name

  # Generate moc cc sources.
  action(action_name) {
    visibility = [ ":$source_set_name" ]
    script = invoker.qt_moc_generator_path  
    sources = moc_sources
    outputs = get_path_info(mocgens, "abspath")
    args = headers

    args += [
      "--header-in-dir",
      rebase_path(moc_in_dir, root_build_dir),
      "--cc-out-dir",
      rel_cc_out_dir,
    ]
  }

  # Build generated moc sources as source_set.
  source_set(target_name) {
    forward_variables_from(invoker, "*")

    sources = get_target_outputs(":$action_name")
    deps = [
      ":$action_name",
    ]
    if (defined(invoker.cflags)) {
      cflags += invoker.cflags
    }
    if (defined(invoker.ldflags)) {
      cflags += invoker.ldflags
    }

    # This will link any libraries in the deps (the use of invoker.deps in the
    ## action won't link it).
    if (defined(invoker.deps)) {
      deps += invoker.deps
    }
  }
}

